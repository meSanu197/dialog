#include <stdio.h>
#include <stdlib.h>

// Definition for a binary tree node
struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Function to create a new tree node
struct TreeNode* createNode(int val) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->val = val;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Helper function to check if two trees are mirror images of each other
int isMirror(struct TreeNode* t1, struct TreeNode* t2) {
    // If both nodes are NULL, they are symmetric
    if (t1 == NULL && t2 == NULL) {
        return 1;
    }
    // If one of the nodes is NULL and the other is not, they are not symmetric
    if (t1 == NULL || t2 == NULL) {
        return 0;
    }
    // Check if the values are the same and recursively check the left and right subtrees
    return (t1->val == t2->val) && isMirror(t1->left, t2->right) && isMirror(t1->right, t2->left);
}

// Function to check if a tree is symmetric
int isSymmetric(struct TreeNode* root) {
    if (root == NULL) {
        return 1;  // An empty tree is symmetric
    }
    // Check if the left and right subtrees of the root are mirror images
    return isMirror(root->left, root->right);
}

// Main function to test the code
int main() {
    // Create a symmetric binary tree
    struct TreeNode* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(2);
    root->left->left = createNode(3);
    root->left->right = createNode(4);
    root->right->left = createNode(4);
    root->right->right = createNode(3);

    if (isSymmetric(root)) {
        printf("The tree is symmetric.\n");
    } else {
        printf("The tree is not symmetric.\n");
    }

    return 0;
}
